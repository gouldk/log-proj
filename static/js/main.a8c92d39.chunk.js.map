{"version":3,"sources":["serviceWorker.js","components/entryBox.jsx","components/submitButton.jsx","components/deviceSelect.jsx","components/displayResults.jsx","components/submissionPage.jsx","index.js"],"names":["Boolean","window","location","hostname","match","EntryBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","textData","updateText","bind","assertThisInitialized","event","setState","target","value","react_default","a","createElement","className","placeholder","type","onChange","Component","SubmitButton","disabled","onClick","props","onSubmit","DeviceSelect","id","_this2","e","onSelect","DisplayResults","parsable","class","scope","defaultLog","SubmissionPage","preSubmission","deviceID","handleSubmit","console","log","handleSelect","entryBox","deviceSelect","submitButton","displayResults","ReactDOM","render","submissionPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8c92d39.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../custom.css\";\n\n// move button to separate component\n\nclass EntryBox extends Component {\n\tstate = {\n\t\ttextData: \"\"\n\t};\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.updateText = this.updateText.bind(this);\n\t}\n\n\tupdateText(event) {\n\t\tthis.setState({ textData: event.target.value });\n\t}\n\n\trender() {\n\t\t// console.log(this.state.textData);\n\n\t\treturn (\n\t\t\t<div className=\"shadow-sm p-3 mb-5 bg-light rounded\">\n\t\t\t\t<textarea\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\tplaceholder=\"Paste your log here...\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={this.state.textData}\n\t\t\t\t\tonChange={this.updateText}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default EntryBox;\n","import React, { Component } from \"react\";\nimport \"../custom.css\";\n\nclass SubmitButton extends Component {\n\tstate = {};\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn btn-primary m-2\"\n\t\t\t\t\t// className=\"button\"\n\t\t\t\t\tdisabled={false}\n\t\t\t\t\tonClick={this.props.onSubmit}\n\t\t\t\t>\n\t\t\t\t\t‚úçüèº\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SubmitButton;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"../custom.css\";\n\nclass DeviceSelect extends Component {\n\tstate = {\n\t\tid: this.props.id\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<select\n\t\t\t\tclassName=\"custom-select\"\n\t\t\t\tonChange={e => this.props.onSelect(e.target.value)}\n\t\t\t\tvalue={this.state.id}\n\t\t\t>\n\t\t\t\t<option value=\"Roku\">Roku</option>\n\t\t\t\t<option value=\"FTV\">Fire TV</option>\n\t\t\t</select>\n\t\t);\n\t}\n}\n\nexport default DeviceSelect;\n","import React, { Component } from \"react\";\n\nclass DisplayResults extends Component {\n\tstate = {\n\t\tparsable: \"\"\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<table class=\"table\">\n\t\t\t\t<thead class=\"thead-light\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t<th>First Name</th>\n\t\t\t\t\t\t<th>Last Name</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\">1</th>\n\t\t\t\t\t\t<td>Mark</td>\n\t\t\t\t\t\t<td>Otto</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\">2</th>\n\t\t\t\t\t\t<td>Jacob</td>\n\t\t\t\t\t\t<td>Thornton</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t);\n\t}\n}\n\nexport default DisplayResults;\n","import React, { Component } from \"react\";\nimport EntryBox from \"./entryBox\";\nimport SubmitButton from \"./submitButton\";\nimport DeviceSelect from \"./deviceSelect\";\nimport DisplayResults from \"./displayResults\";\nimport \"../custom.css\";\n\n// Sets the default log option\nlet defaultLog = \"Roku\"; // \"Roku\", \"FTV\"...\n\nclass SubmissionPage extends Component {\n\tstate = {\n\t\tpreSubmission: true,\n\t\tdeviceID: defaultLog\n\t};\n\n\thandleSubmit = () => {\n\t\tconsole.log(\"Submit requested.\");\n\t\tthis.setState({ preSubmission: false });\n\t};\n\n\thandleSelect = deviceID => {\n\t\tconsole.log(\"Selection changed:\", deviceID);\n\t\tthis.setState({ deviceID: deviceID });\n\t};\n\t// Generating parsed {this.state.deviceID} log...\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.state.preSubmission && (\n\t\t\t\t\t<div className=\"centered\">\n\t\t\t\t\t\t<EntryBox />\n\t\t\t\t\t\t<DeviceSelect id={this.deviceID} onSelect={this.handleSelect} />\n\t\t\t\t\t\t<SubmitButton onSubmit={this.handleSubmit} />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{/* {!this.state.preSubmission && (\n\t\t\t\t\t<div className=\"spinner-border text-primary\" role=\"status\">\n\t\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\n\t\t\t\t\t</div>\n\t\t\t\t)} */}\n\t\t\t\t{!this.state.preSubmission && <DisplayResults />}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SubmissionPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SubmissionPage from \"./components/submissionPage\";\n\nReactDOM.render(<SubmissionPage />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}