{"version":3,"sources":["serviceWorker.js","components/entryBox.jsx","components/submitButton.jsx","components/deviceSelect.jsx","components/displayResults.jsx","components/submissionPage.jsx","index.js"],"names":["Boolean","window","location","hostname","match","EntryBox","react_default","a","createElement","className","rows","placeholder","type","value","this","props","displayText","onChange","Component","SubmitButton","state","disabled","onClick","onSubmit","role","aria-label","DeviceSelect","id","_this","_this2","e","onSelect","target","DisplayResults","parsable","renderTableData","idx","tableData","map","dataPoint","index","key","renderDeviceData","length","defaultLog","SubmissionPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","preSubmission","deviceID","entryText","parsedText","handleSubmit","console","log","setState","logParser","handleSelect","text","lineArray","split","parsedOutput","filter","line","includes","onDrop","acceptedFiles","handleTextChange","child","React","createRef","align","es","_ref","getRootProps","entryBox","deviceSelect","submitButton","displayResults","ReactDOM","render","submissionPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb3defa3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../custom.css\";\n\nclass EntryBox extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"shadow-sm p-3 mb-5 bg-light rounded\">\n\t\t\t\t<textarea\n\t\t\t\t\trows=\"12\"\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\tplaceholder=\"Drag / drop / paste your log here...\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={this.props.displayText}\n\t\t\t\t\tonChange={this.props.onChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default EntryBox;\n","import React, { Component } from \"react\";\nimport \"../custom.css\";\n\nclass SubmitButton extends Component {\n\tstate = {};\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn btn-primary m-2\"\n\t\t\t\t\t// className=\"button\"\n\t\t\t\t\tdisabled={false}\n\t\t\t\t\tonClick={this.props.onSubmit}\n\t\t\t\t>\n\t\t\t\t\t<span role=\"img\" aria-label=\"send\">\n\t\t\t\t\t\t✍🏼\n\t\t\t\t\t</span>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SubmitButton;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"../custom.css\";\n\nclass DeviceSelect extends Component {\n\tstate = {\n\t\tid: this.props.id\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<select\n\t\t\t\tclassName=\"custom-select\"\n\t\t\t\tonChange={e => this.props.onSelect(e.target.value)}\n\t\t\t\tvalue={this.state.id}\n\t\t\t>\n\t\t\t\t<option value=\"Roku\">Roku</option>\n\t\t\t\t<option value=\"FTV\">Fire TV</option>\n\t\t\t</select>\n\t\t);\n\t}\n}\n\nexport default DeviceSelect;\n","import React, { Component } from \"react\";\n\nclass DisplayResults extends Component {\n\tstate = {\n\t\tparsable: \"\"\n\t};\n\n\trenderTableData = idx => {\n\t\treturn this.props.tableData[idx].map((dataPoint, index) => {\n\t\t\treturn (\n\t\t\t\t<tr key={index}>\n\t\t\t\t\t<td>{dataPoint}</td>\n\t\t\t\t</tr>\n\t\t\t);\n\t\t});\n\t};\n\n\trenderDeviceData = idx => {\n\t\treturn this.props.tableData[idx].map((dataPoint, index) => {\n\t\t\treturn (\n\t\t\t\t<tr key={index}>\n\t\t\t\t\t<td />\n\t\t\t\t</tr>\n\t\t\t);\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<table className=\"table\">\n\t\t\t\t\t<thead className=\"thead-light\">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\tDevice Info{\"  \"}\n\t\t\t\t\t\t\t\t<span className=\"badge badge-info\">\n\t\t\t\t\t\t\t\t\t{this.props.tableData[2].length}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>{this.renderTableData(2)}</tbody>\n\t\t\t\t</table>\n\t\t\t\t<table className=\"table\">\n\t\t\t\t\t<thead className=\"thead-light\">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\tPub Ads{\"  \"}\n\t\t\t\t\t\t\t\t<span className=\"badge badge-info\">\n\t\t\t\t\t\t\t\t\t{this.props.tableData[0].length}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>{this.renderTableData(0)}</tbody>\n\t\t\t\t</table>\n\t\t\t\t<table className=\"table\">\n\t\t\t\t\t<thead className=\"thead-light\">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\tStream IDs{\"  \"}\n\t\t\t\t\t\t\t\t<span className=\"badge badge-info\">\n\t\t\t\t\t\t\t\t\t{this.props.tableData[1].length}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>{this.renderTableData(1)}</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DisplayResults;\n","import React, { Component } from \"react\";\nimport EntryBox from \"./entryBox\";\nimport SubmitButton from \"./submitButton\";\nimport DeviceSelect from \"./deviceSelect\";\nimport DisplayResults from \"./displayResults\";\nimport \"../custom.css\";\nimport Dropzone from \"react-dropzone\";\n\n// Sets the default log option\nlet defaultLog = \"Roku\"; // \"Roku\", \"FTV\"...\n\nclass SubmissionPage extends Component {\n\tstate = {\n\t\tpreSubmission: true,\n\t\tdeviceID: defaultLog,\n\t\tentryText: \"\",\n\t\tparsedText: []\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.child = React.createRef();\n\t}\n\n\thandleSubmit = () => {\n\t\tconsole.log(\"Submit requested.\");\n\t\tlet log = this.state.entryText;\n\t\tthis.setState({\n\t\t\tpreSubmission: false\n\t\t});\n\t\tthis.logParser(log);\n\t};\n\n\thandleSelect = deviceID => {\n\t\tconsole.log(\"Selection changed:\", deviceID);\n\t\tthis.setState({ deviceID: deviceID });\n\t};\n\n\tlogParser = text => {\n\t\tlet lineArray = text.split(/\\r?\\n/);\n\t\tlet pubAds = lineArray.filter(line => line.includes(\"/ads?\"));\n\t\tlet streamIDs = lineArray.filter(line => line.includes(\"streamid\"));\n\t\tlet appVersions = lineArray.filter(line => line.includes(\"app_version:\"));\n\t\tlet parsedOutput = [pubAds, streamIDs, appVersions];\n\t\tthis.setState({ parsedText: parsedOutput });\n\t\t// console.log(pubAds);\n\t\t// console.log(streamIDs);\n\t\t// console.log(appVersions);\n\t};\n\n\t// Flesh out with functionality & file checking\n\tonDrop = acceptedFiles => {\n\t\tconsole.log(acceptedFiles);\n\t};\n\n\thandleTextChange = text => {\n\t\tthis.setState({ entryText: text.target.value });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 align=\"center\">*</h1>\n\t\t\t\t<h6 align=\"center\">{/* <i>where's your excuse now?</i> */}</h6>\n\t\t\t\t{this.state.preSubmission && (\n\t\t\t\t\t<div className=\"centered\">\n\t\t\t\t\t\t<Dropzone onDrop={this.onDrop}>\n\t\t\t\t\t\t\t{({ getRootProps }) => (\n\t\t\t\t\t\t\t\t<div {...getRootProps()}>\n\t\t\t\t\t\t\t\t\t<EntryBox\n\t\t\t\t\t\t\t\t\t\tonChange={this.handleTextChange}\n\t\t\t\t\t\t\t\t\t\tdisplayText={this.state.entryText}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Dropzone>\n\n\t\t\t\t\t\t<DeviceSelect id={this.deviceID} onSelect={this.handleSelect} />\n\t\t\t\t\t\t<SubmitButton onSubmit={this.handleSubmit} />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{/* {!this.state.preSubmission && (\n\t\t\t\t\t<div className=\"spinner-border text-primary\" role=\"status\">\n\t\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\n\t\t\t\t\t</div>\n\t\t\t\t)} */}\n\t\t\t\t{!this.state.preSubmission && (\n\t\t\t\t\t<DisplayResults tableData={this.state.parsedText} />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SubmissionPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SubmissionPage from \"./components/submissionPage\";\n\nReactDOM.render(<SubmissionPage />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}